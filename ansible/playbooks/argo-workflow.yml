---
- name: Install Argo Workflows and Deployment Pipeline
  hosts: k3s_masters[0]
  tasks:
    - name: Create Argo Workflows namespace
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        name: argo
        api_version: v1
        kind: Namespace
        state: present

    - name: Install Argo Workflows
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        src: https://github.com/argoproj/argo-workflows/releases/download/v3.5.2/install.yaml

    - name: Create Argo CD credentials secret
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: argocd-credentials
            namespace: argo
          type: Opaque
          stringData:
            password: "{{ argocd_admin_password }}"

    - name: Create GitHub credentials secret
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: github-credentials
            namespace: argo
          type: Opaque
          stringData:
            token: "{{ github_pat }}"

    - name: Deploy workflow template
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        definition:
          apiVersion: argoproj.io/v1alpha1
          kind: WorkflowTemplate
          metadata:
            name: pixels-deployment-pipeline
            namespace: argo
          spec:
            entrypoint: deploy-test-rollback
            arguments:
              parameters:
              - name: service-name
                description: "Service name (api, migrate, etc.)"
              - name: image-tag
                description: "Image tag (commit SHA)"
              - name: environment
                value: "staging"
                description: "Target environment"
              - name: repo-url
                description: "Git repository URL"
            
            templates:
            - name: deploy-test-rollback
              steps:
              - - name: deploy-service
                  template: deploy-to-argocd
                  arguments:
                    parameters:
                    - name: service-name
                      value: "{{'{{workflow.parameters.service-name}}'}}"
                    - name: image-tag
                      value: "{{'{{workflow.parameters.image-tag}}'}}"
                    - name: environment
                      value: "{{'{{workflow.parameters.environment}}'}}"
              
              - - name: sync-deployment
                  template: sync-and-wait
                  arguments:
                    parameters:
                    - name: environment
                      value: "{{'{{workflow.parameters.environment}}'}}"
              
              - - name: run-smoke-tests
                  template: smoke-tests
                  arguments:
                    parameters:
                    - name: environment
                      value: "{{'{{workflow.parameters.environment}}'}}"
                    - name: service-name
                      value: "{{'{{workflow.parameters.service-name}}'}}"

            - name: deploy-to-argocd
              inputs:
                parameters:
                - name: service-name
                - name: image-tag
                - name: environment
              script:
                image: argoproj/argocd:v2.9.3
                command: [sh]
                source: |
                  set -e
                  echo "ðŸš€ Deploying {{'{{inputs.parameters.service-name}}'}} with tag {{'{{inputs.parameters.image-tag}}'}}"
                  
                  argocd login argocd-server.argocd.svc.cluster.local:443 \
                    --username admin --password $ARGOCD_PASSWORD --insecure
                  
                  if [ "{{'{{inputs.parameters.service-name}}'}}" = "api" ]; then
                    argocd app set pixels-{{'{{inputs.parameters.environment}}'}} \
                      --kustomize-image pixels=ghcr.io/pokemonpower92/pixels/api:{{'{{inputs.parameters.image-tag}}'}}
                  elif [ "{{'{{inputs.parameters.service-name}}'}}" = "migrate" ]; then
                    argocd app set pixels-{{'{{inputs.parameters.environment}}'}} \
                      --kustomize-image migrate=ghcr.io/pokemonpower92/pixels/migrate:{{'{{inputs.parameters.image-tag}}'}}
                  fi
                  
                  echo "âœ… Image override set"
                env:
                - name: ARGOCD_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: argocd-credentials
                      key: password

            - name: sync-and-wait
              inputs:
                parameters:
                - name: environment
              script:
                image: argoproj/argocd:v2.9.3
                command: [sh]
                source: |
                  set -e
                  echo "ðŸ”„ Syncing deployment"
                  
                  argocd login argocd-server.argocd.svc.cluster.local:443 \
                    --username admin --password $ARGOCD_PASSWORD --insecure
                  
                  kubectl delete job pixels-migration -n pixels-{{'{{inputs.parameters.environment}}'}} --ignore-not-found=true
                  
                  kubectl create secret generic jwt-secret \
                    --from-literal=PRIVATE_KEY_PEM="$PRIVATE_KEY_PEM" \
                    -n pixels-{{'{{inputs.parameters.environment}}'}} \
                    --dry-run=client -o yaml | kubectl apply -f -
                  
                  argocd app sync pixels-{{'{{inputs.parameters.environment}}'}} --timeout 300
                  argocd app wait pixels-{{'{{inputs.parameters.environment}}'}} --timeout 600
                  
                  echo "âœ… Deployment healthy"
                env:
                - name: ARGOCD_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: argocd-credentials
                      key: password
                - name: PRIVATE_KEY_PEM
                  valueFrom:
                    secretKeyRef:
                      name: jwt-secret
                      key: PRIVATE_KEY_PEM

            - name: smoke-tests
              inputs:
                parameters:
                - name: environment
                - name: service-name
              script:
                image: ghcr.io/pokemonpower92/test-runner-go
                command: [run_test.shs.sh]
                args: ["{{'{{inputs.parameters.service-name}}'}}}"]
                env:
                - name: TARGET_ENV
                  value: "{{'{{inputs.parameters.environment}}'}}"
                - name: REPO_URL
                  value: "{{'{{workflow.parameters.repo-url}}'}}"
                source: |
                  git clone $REPO_URL .